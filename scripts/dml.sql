/******************************************************************************/
/*            Generated by IBExpert 2024.4.7.1 01/07/2024 17:43:40            */
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES WIN1252;

SET CLIENTLIB 'C:\Program Files (x86)\Firebird\Firebird_5_0\fbclient.dll';

CREATE DATABASE 'C:\Projetos Delphi\sistema_venda\DADOS.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET WIN1252 COLLATION WIN1252;



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_CLIENTES_ID START WITH 1 INCREMENT BY 1;
SET GENERATOR GEN_CLIENTES_ID TO 22;

CREATE GENERATOR GEN_EXCEPTIONS_ID START WITH 1 INCREMENT BY 1;
SET GENERATOR GEN_EXCEPTIONS_ID TO 10;

CREATE GENERATOR GEN_PEDIDOS_ID START WITH 1 INCREMENT BY 1;
SET GENERATOR GEN_PEDIDOS_ID TO 26;

CREATE GENERATOR GEN_PEDIDOS_ITENS_ID START WITH 1 INCREMENT BY 1;
SET GENERATOR GEN_PEDIDOS_ITENS_ID TO 42;

CREATE GENERATOR GEN_PRODUTOS_ID START WITH 1 INCREMENT BY 1;
SET GENERATOR GEN_PRODUTOS_ID TO 8;



/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE SP_TOP2_PRODUTOS_VENDIDOS (
    DATA_INICIO DATE,
    DATA_FIM DATE)
RETURNS (
    ID INTEGER,
    DESCRICAO VARCHAR(100),
    MARCA VARCHAR(30),
    PRECO_UNITARIO NUMERIC(15,2),
    QUANTIDADE NUMERIC(15,2),
    TOTAL_VENDIDO NUMERIC(15,2))
AS
BEGIN
  SUSPEND;
END^






SET TERM ; ^



/******************************************************************************/
/*                              Stored functions                              */
/******************************************************************************/



SET TERM ^ ;

CREATE FUNCTION SOMA_TOTAL_PEDIDO_FUNC (
    ID_PEDIDO INTEGER NOT NULL)
RETURNS NUMERIC(15,2)
AS
BEGIN
  RETURN NULL;
END^






SET TERM ; ^



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE CLIENTES (
    ID             INTEGER NOT NULL,
    NOME_FANTASIA  VARCHAR(50) NOT NULL,
    RAZAO_SOCIAL   VARCHAR(50) NOT NULL,
    CNPJ           VARCHAR(18) NOT NULL,
    ENDERECO       VARCHAR(100) NOT NULL,
    TELEFONE       VARCHAR(15) CHARACTER SET NONE
);

CREATE TABLE EXCEPTIONS (
    ID         INTEGER NOT NULL,
    "MESSAGE"  VARCHAR(100) NOT NULL
);

CREATE TABLE PEDIDOS (
    ID           INTEGER NOT NULL,
    ID_CLIENTE   INTEGER,
    VALOR_TOTAL  NUMERIC(15,2) NOT NULL,
    DATA         TIMESTAMP,
    STATUS       VARCHAR(30) DEFAULT 'NOVO'
);

CREATE TABLE PEDIDOS_ITENS (
    ID              INTEGER NOT NULL,
    ID_PEDIDO       INTEGER,
    ID_PRODUTO      INTEGER,
    QUANTIDADE      NUMERIC(15,2) NOT NULL,
    VALOR_UNITARIO  NUMERIC(15,2) NOT NULL,
    VALOR_TOTAL     NUMERIC(15,2) NOT NULL,
    NUM_ITEM        INTEGER
);

CREATE TABLE PRODUTOS (
    ID         INTEGER NOT NULL,
    DESCRICAO  VARCHAR(100) NOT NULL,
    MARCA      VARCHAR(30) NOT NULL,
    PRECO      NUMERIC(15,2) NOT NULL
);



/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE CLIENTES ADD CONSTRAINT PK_CLIENTES PRIMARY KEY (ID);
ALTER TABLE EXCEPTIONS ADD CONSTRAINT PK_EXCEPTIONS PRIMARY KEY (ID);
ALTER TABLE PEDIDOS ADD CONSTRAINT PK_PEDIDOS PRIMARY KEY (ID);
ALTER TABLE PEDIDOS_ITENS ADD CONSTRAINT PK_PEDIDOS_ITENS PRIMARY KEY (ID);
ALTER TABLE PRODUTOS ADD CONSTRAINT PK_PRODUTOS PRIMARY KEY (ID);


/******************************************************************************/
/*                                Foreign keys                                */
/******************************************************************************/

ALTER TABLE PEDIDOS ADD CONSTRAINT FK_PEDIDOS_ID_CLIENTE FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID);
ALTER TABLE PEDIDOS_ITENS ADD CONSTRAINT FK_PEDIDOS_ITENS_ID_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDOS (ID) ON DELETE CASCADE;
ALTER TABLE PEDIDOS_ITENS ADD CONSTRAINT FK_PEDIDOS_ITENS_ID_PRODUTO FOREIGN KEY (ID_PRODUTO) REFERENCES PRODUTOS (ID);


/******************************************************************************/
/*                             Stored procedures                              */
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE SP_TOP2_PRODUTOS_VENDIDOS (
    DATA_INICIO DATE,
    DATA_FIM DATE)
RETURNS (
    ID INTEGER,
    DESCRICAO VARCHAR(100),
    MARCA VARCHAR(30),
    PRECO_UNITARIO NUMERIC(15,2),
    QUANTIDADE NUMERIC(15,2),
    TOTAL_VENDIDO NUMERIC(15,2))
AS
begin
  FOR
        SELECT
            FIRST 2 PROD.ID,
            PROD.DESCRICAO,
            PROD.MARCA,
            PROD.PRECO AS PRECO_UNITARIO,
            SUM(PI.QUANTIDADE) AS QUANTIDADE,
            SUM(PI.VALOR_TOTAL) AS TOTAL_VENDIDO
        FROM
            PEDIDOS P
        INNER JOIN
            PEDIDOS_ITENS PI ON P.ID = PI.ID_PEDIDO
        INNER JOIN
            PRODUTOS PROD ON PI.ID_PRODUTO = PROD.ID
        WHERE
            ((CAST(P.DATA AS DATE) >= :DATA_INICIO) AND (CAST(P.DATA AS DATE) <= :DATA_FIM))
        GROUP BY
            PROD.ID,
            PROD.DESCRICAO,
            PROD.MARCA,
            PROD.PRECO
        ORDER BY
            QUANTIDADE DESC
    INTO
        :ID, :DESCRICAO, :MARCA, :PRECO_UNITARIO, :QUANTIDADE, :TOTAL_VENDIDO
    DO
    BEGIN
        SUSPEND;
    END
end^



SET TERM ; ^



/******************************************************************************/
/*                              Stored functions                              */
/******************************************************************************/



SET TERM ^ ;

ALTER FUNCTION SOMA_TOTAL_PEDIDO_FUNC (
    ID_PEDIDO INTEGER NOT NULL)
RETURNS NUMERIC(15,2)
AS
declare variable total_item numeric(15,2);
declare variable total_geral numeric(15,2);
begin
    TOTAL_GERAL = 0;
    TOTAL_ITEM = 0;
    FOR SELECT 
            VALOR_TOTAL
        FROM 
            PEDIDOS_ITENS 
        WHERE 
            ID_PEDIDO = :ID_PEDIDO
        INTO 
            TOTAL_ITEM
    DO
        TOTAL_GERAL = TOTAL_GERAL + TOTAL_ITEM;
        
    RETURN TOTAL_GERAL;
end^



SET TERM ; ^

SET SQL DIALECT 3;



SET TERM ^ ;



CREATE OR ALTER TRIGGER PRODUTOS_BU FOR PRODUTOS
ACTIVE BEFORE UPDATE POSITION 0
AS
declare variable contador integer;
begin
  -- Verifique se a descrição já existe
  SELECT COUNT(*)
  FROM PRODUTOS
  WHERE lower(DESCRICAO) = lower(NEW.DESCRICAO)
  AND ID <> OLD.ID
  INTO :CONTADOR;

  -- Se a descrição já existir, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_DESCRICAO_DUPLICADA;
  END
end
^
SET TERM ; ^

SET SQL DIALECT 3;


CREATE GENERATOR GEN_PRODUTOS_ID;

SET TERM ^ ;



CREATE OR ALTER TRIGGER PRODUTOS_BI FOR PRODUTOS
ACTIVE BEFORE INSERT POSITION 0
as
declare variable CONTADOR INTEGER;
begin
  -- Verifique se a descrição já existe
  SELECT COUNT(*)
  FROM PRODUTOS
  WHERE lower(DESCRICAO) = lower(NEW.DESCRICAO)
  INTO :CONTADOR;

  -- Se a descrição já existir, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_DESCRICAO_DUPLICADA;
  END
   
  if (new.id is null) then
    new.id = gen_id(gen_produtos_id,1);
end
^
SET TERM ; ^


/* Privileges of users/roles */
GRANT USAGE ON SEQUENCE GEN_PRODUTOS_ID TO SYSDBA WITH GRANT OPTION;



SET TERM ^ ;



CREATE OR ALTER TRIGGER PRODUTOS_BD FOR PRODUTOS
ACTIVE BEFORE DELETE POSITION 0
AS
declare variable contador integer;
begin
  -- Verifique se o produto já possui pedidos
  SELECT COUNT(*)
  FROM PEDIDOS_ITENS
  WHERE ID_PRODUTO = OLD.ID
  INTO :CONTADOR;

  -- Se o produto já possui pedidos, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_PRODUTO_COM_PEDIDO;
  END
end
^
SET TERM ; ^


SET SQL DIALECT 3;



SET TERM ^ ;



CREATE OR ALTER TRIGGER PEDIDO_BU FOR PEDIDOS
ACTIVE BEFORE UPDATE POSITION 0
AS
begin
  IF (OLD.STATUS = 'APROVADO' AND NEW.STATUS <> 'CANCELADO') THEN
  BEGIN
    EXCEPTION EX_ALTERAR_PEDIDO_APROVADO;
  END
end
^
SET TERM ; ^


SET SQL DIALECT 3;



SET TERM ^ ;



CREATE OR ALTER TRIGGER PEDIDO_BD FOR PEDIDOS
ACTIVE BEFORE DELETE POSITION 0
AS
declare variable contador integer;
begin

  IF (OLD.STATUS = 'APROVADO') THEN
  BEGIN
    EXCEPTION EX_EXCLUIR_PEDIDO_APROVADO;
  END
end
^
SET TERM ; ^


SET SQL DIALECT 3;


CREATE GENERATOR GEN_PEDIDOS_ITENS_ID;

SET TERM ^ ;



CREATE OR ALTER TRIGGER PEDIDOS_ITENS_BI FOR PEDIDOS_ITENS
ACTIVE BEFORE INSERT POSITION 0
as
declare variable contador integer;
begin
  if (new.id is null) then
    new.id = gen_id(gen_pedidos_itens_id,1);

  -- Verifique se a produto já existe no pedido
  SELECT COUNT(*)
  FROM PEDIDOS_ITENS
  WHERE ID_PRODUTO = NEW.ID_PRODUTO
  AND ID_PEDIDO = NEW.ID_PEDIDO
  INTO :CONTADOR;

  -- Se a produto já existir, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_PRODUTO_DUPLICADO_PEDIDO;
  END
end
^
SET TERM ; ^


/* Privileges of users/roles */
GRANT USAGE ON SEQUENCE GEN_PEDIDOS_ITENS_ID TO SYSDBA WITH GRANT OPTION;

SET SQL DIALECT 3;


CREATE GENERATOR GEN_PEDIDOS_ID;

SET TERM ^ ;



CREATE OR ALTER TRIGGER PEDIDOS_BI FOR PEDIDOS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.data is null) then
  begin
    new.data = current_timestamp;
  end

  if (new.id is null) then
    new.id = gen_id(gen_pedidos_id,1);
end
^
SET TERM ; ^


/* Privileges of users/roles */
GRANT USAGE ON SEQUENCE GEN_PEDIDOS_ID TO SYSDBA WITH GRANT OPTION;

SET SQL DIALECT 3;


CREATE GENERATOR GEN_EXCEPTIONS_ID;

SET TERM ^ ;



CREATE OR ALTER TRIGGER EXCEPTIONS_BI FOR EXCEPTIONS
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_exceptions_id,1);
end
^
SET TERM ; ^


/* Privileges of users/roles */
GRANT USAGE ON SEQUENCE GEN_EXCEPTIONS_ID TO SYSDBA WITH GRANT OPTION;

SET SQL DIALECT 3;



SET TERM ^ ;



CREATE OR ALTER TRIGGER CLIENTE_BD FOR CLIENTES
ACTIVE BEFORE DELETE POSITION 0
AS
declare variable contador integer;
begin
  -- Verifique se o cliente já possui pedidos
  SELECT COUNT(*)
  FROM PEDIDOS
  WHERE ID_CLIENTE = OLD.ID
  INTO :CONTADOR;

  -- Se o cliente já possui pedidos, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_CLIENTE_COM_PEDIDO;
  END
end
^
SET TERM ; ^


SET SQL DIALECT 3;



SET TERM ^ ;



CREATE OR ALTER TRIGGER CLIENTES_BU FOR CLIENTES
ACTIVE BEFORE UPDATE POSITION 0
AS
declare variable contador integer;
begin
  if (new.telefone is null or new.telefone = '') then
  begin
    EXCEPTION EX_TELEFONE_IS_NOT_NULL;
  end

  -- Verifique se a cnpj já existe
  SELECT COUNT(*)
  FROM CLIENTES
  WHERE CNPJ = NEW.CNPJ
  AND ID <> OLD.ID
  INTO :CONTADOR;

  -- Se a cnpj já existir, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_CNPJ_DUPLICADO;
  END

  SELECT COUNT(*)
  FROM CLIENTES
  WHERE TELEFONE = NEW.TELEFONE
  AND ID <> OLD.ID
  INTO :CONTADOR;

  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_TELEFONE_DUPLICADO;
  END
end
^
SET TERM ; ^


SET SQL DIALECT 3;


CREATE GENERATOR GEN_CLIENTES_ID;

SET TERM ^ ;



CREATE OR ALTER TRIGGER CLIENTES_BI FOR CLIENTES
ACTIVE BEFORE INSERT POSITION 0
as
declare variable contador integer;
begin

  if (new.telefone is null or new.telefone = '') then
  begin
    EXCEPTION EX_TELEFONE_IS_NOT_NULL;
  end

  -- Verifique se a cnpj já existe
  SELECT COUNT(*)
  FROM CLIENTES
  WHERE CNPJ = NEW.CNPJ
  INTO :CONTADOR;

  -- Se a cnpj já existir, lance a exceção
  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_CNPJ_DUPLICADO;
  END
    
  SELECT COUNT(*)
  FROM CLIENTES
  WHERE TELEFONE = NEW.TELEFONE
  INTO :CONTADOR;

  IF (CONTADOR > 0) THEN
  BEGIN
    EXCEPTION EX_TELEFONE_DUPLICADO;
  END

  if (new.id is null) then
    new.id = gen_id(gen_clientes_id,1);
end
^
SET TERM ; ^


/* Privileges of users/roles */
GRANT USAGE ON SEQUENCE GEN_CLIENTES_ID TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_ALTERAR_PEDIDO_APROVADO '[EXDB009] O pedido foi aprovado, não pode ser alterado';

COMMENT ON EXCEPTION EX_ALTERAR_PEDIDO_APROVADO IS 
'Exceção para validação de pedidos com status aprovado antes de alteração';

GRANT USAGE ON EXCEPTION EX_ALTERAR_PEDIDO_APROVADO TO SYSDBA WITH GRANT OPTION;

CREATE EXCEPTION EX_CLIENTE_COM_PEDIDO '[EXDB007] O cliente possui pedidos, não pode ser excluído';

COMMENT ON EXCEPTION EX_CLIENTE_COM_PEDIDO IS 
'Exceção para validação de clientes com pedidos atrelados antes da exclusão';

GRANT USAGE ON EXCEPTION EX_CLIENTE_COM_PEDIDO TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_CNPJ_DUPLICADO '[EXDB003] Já existe um cliente cadastrado para esse CNPJ';

COMMENT ON EXCEPTION EX_CNPJ_DUPLICADO IS 
'Exceção para validação de CNPJ duplicado';

GRANT USAGE ON EXCEPTION EX_CNPJ_DUPLICADO TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_DESCRICAO_DUPLICADA '[EXDB002] Já existe um produto cadastrado com essa descrição';

COMMENT ON EXCEPTION EX_DESCRICAO_DUPLICADA IS 
'Exceção para validação de descrição duplicada em produtos';

GRANT USAGE ON EXCEPTION EX_DESCRICAO_DUPLICADA TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_EXCLUIR_PEDIDO_APROVADO '[EXDB008] O pedido foi aprovado, não pode ser excluído';

GRANT USAGE ON EXCEPTION EX_EXCLUIR_PEDIDO_APROVADO TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_PEDIDO_CONTEM_ITENS '[EXDB005] O pedido possui itens, não pode ser excluído';

COMMENT ON EXCEPTION EX_PEDIDO_CONTEM_ITENS IS 
'Exceção para validação de pedido com itens antes da exclusão';

GRANT USAGE ON EXCEPTION EX_PEDIDO_CONTEM_ITENS TO SYSDBA WITH GRANT OPTION;

CREATE EXCEPTION EX_PRODUTO_COM_PEDIDO '[EXDB006] O produto possui pedidos, não pode ser excluído';

COMMENT ON EXCEPTION EX_PRODUTO_COM_PEDIDO IS 
'Exceção para validação de produtos atrelados a pedidos antes da exclusão';

GRANT USAGE ON EXCEPTION EX_PRODUTO_COM_PEDIDO TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_PRODUTO_DUPLICADO_PEDIDO '[EXDB004] Este produto já foi adicionado ao pedido';

COMMENT ON EXCEPTION EX_PRODUTO_DUPLICADO_PEDIDO IS 
'Exceção para validação de produto duplicado no pedido';

GRANT USAGE ON EXCEPTION EX_PRODUTO_DUPLICADO_PEDIDO TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_TELEFONE_DUPLICADO '[EXDB010] Já existe um cliente cadastrado com este telefone';

COMMENT ON EXCEPTION EX_TELEFONE_DUPLICADO IS 
'Exceção para validação de telefone duplicado, antes da inserção';

GRANT USAGE ON EXCEPTION EX_TELEFONE_DUPLICADO TO SYSDBA WITH GRANT OPTION;


CREATE EXCEPTION EX_TELEFONE_IS_NOT_NULL '[EXDB001] O campo telefone é obrigatório, favor informe.';

COMMENT ON EXCEPTION EX_TELEFONE_IS_NOT_NULL IS 
'Exceção para validação de campo telefone é obrigatório';

GRANT USAGE ON EXCEPTION EX_TELEFONE_IS_NOT_NULL TO SYSDBA WITH GRANT OPTION;